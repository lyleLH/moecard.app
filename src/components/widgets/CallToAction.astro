---
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import type { CallToAction, Widget } from '~/types';
import Headline from '~/components/ui/Headline.astro';
import Button from '~/components/ui/Button.astro';
import { Image } from 'astro:assets';
import logoSvg from '~/assets/images/logo.svg';
import Twemoji from '../common/Twemoji.astro';

interface Props extends Widget {
  title?: string;
  subtitle?: string;
  tagline?: string;
  callToAction?: CallToAction;
  actions?: string | CallToAction[];
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  actions = await Astro.slots.render('actions'),

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <div class="relative">
    <!-- 背景装饰 -->
    <div class="absolute inset-0 pointer-events-none overflow-hidden">
      <!-- 左上角装饰 -->
      <svg class="absolute -left-8 -top-8 w-32 h-32 text-green-200 dark:text-green-900/30 transform -rotate-12" viewBox="0 0 100 100">
        <defs>
          <pattern id="smallGrid" width="10" height="10" patternUnits="userSpaceOnUse">
            <path d="M 10 0 L 0 0 0 10" fill="none" stroke="currentColor" stroke-width="0.5"/>
          </pattern>
          <pattern id="grid" width="50" height="50" patternUnits="userSpaceOnUse">
            <rect width="50" height="50" fill="url(#smallGrid)"/>
          </pattern>
        </defs>
        <rect width="100%" height="100%" fill="url(#grid)" />
      </svg>

      <!-- 右上角装饰 -->
      <div class="absolute -right-8 -top-8">
        <div class="w-24 h-24 bg-gradient-to-br from-green-100 to-green-200 dark:from-green-900/20 dark:to-green-800/20 rounded-full blur-2xl opacity-50"></div>
      </div>

      <!-- 左下角装饰 -->
      <svg class="absolute left-1/4 bottom-0 w-24 h-24 text-green-300 dark:text-green-800/30" viewBox="0 0 100 100">
        <circle cx="50" cy="50" r="40" fill="none" stroke="currentColor" stroke-width="2" stroke-dasharray="6 4"/>
      </svg>

      <!-- 右下角装饰 -->
      <div class="absolute -right-4 -bottom-4 w-24 h-24 bg-green-50 dark:bg-green-900/20 rounded-full blur-2xl opacity-40"></div>
    </div>

    <!-- 主要内容卡片 -->
    <div
      class="relative backdrop-blur-sm bg-white/70 dark:bg-slate-900/70 p-8 md:p-10 rounded-2xl shadow-lg dark:shadow-green-900/20 border border-gray-200 dark:border-slate-800 transform hover:scale-[1.01] transition-all duration-300"
    >
      <div class="relative z-10">
        <!-- Logo 和 Emoji 装饰 -->
        <div class="flex items-center justify-center mb-6 gap-4">
          <div class="w-12 h-12">
            <Image 
              src={logoSvg}
              alt="MoeCard Logo" 
              class="w-full h-full object-contain rounded-lg shadow-md"
              style={{
                filter: 'drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1))'
              }}
            />
          </div>
          <div class="flex gap-2">
            <Twemoji emoji="✨" size="1.5em" />
            <Twemoji emoji="🎨" size="1.5em" />
            <Twemoji emoji="🌟" size="1.5em" />
          </div>
        </div>

        <Headline
          title={title}
          subtitle={subtitle}
          tagline={tagline}
          classes={{
            container: 'mb-0 md:mb-0',
            title: 'text-4xl md:text-4xl font-bold tracking-tighter mb-4 font-heading',
            subtitle: 'text-xl text-muted dark:text-slate-400',
          }}
        />
        {
          actions && (
            <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 mt-6">
              {Array.isArray(actions) ? (
                actions.map((action) => (
                  <div class="flex w-full sm:w-auto">
                    <Button {...(action || {})} class="w-full sm:mb-0" />
                  </div>
                ))
              ) : (
                <Fragment set:html={actions} />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</WidgetWrapper>

<style>
/* 卡片悬浮效果 */
.backdrop-blur-sm {
  backdrop-filter: blur(8px);
  -webkit-backdrop-filter: blur(8px);
}

/* 确保深色模式下的渐变效果 */
@media (prefers-color-scheme: dark) {
  .dark\:shadow-green-900\/20 {
    --tw-shadow-color: rgb(20 83 45 / 0.2);
    --tw-shadow: var(--tw-shadow-colored);
  }
}
</style>
