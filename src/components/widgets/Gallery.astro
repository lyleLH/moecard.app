---
import Twemoji from '../common/Twemoji.astro';

interface Props {
  title?: string;
  subtitle?: string;
  images: {
    src: string;
    alt: string;
  }[];
  classes?: {
    container?: string;
    title?: string;
    subtitle?: string;
    grid?: string;
  };
}

const {
  title = '',
  subtitle = '',
  images = [],
  classes = {},
} = Astro.props;

// 分组图片
const firstRow = images.filter((_, i) => i % 2 === 0).slice(0, 8);
const secondRow = images.filter((_, i) => i % 2 === 1).slice(0, 8);

// 计算动画持续时间
const animationDuration = Math.max(20, Math.min(firstRow.length * 5, 30));
---

<section class:list={['relative', classes?.container]}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6">
    {title && (
      <h2 class:list={['text-center mb-4', classes?.title]}>
        {title}
      </h2>
    )}
    {subtitle && (
      <p class:list={['text-center mb-12', classes?.subtitle]}>
        {subtitle}
      </p>
    )}
    
    <div class="space-y-8">
      <!-- 第一行 向左滚动 -->
      <div class="overflow-hidden">
        <div class="scroll-row flex gap-4" style={`animation-duration: ${animationDuration}s`}>
          {[...firstRow, ...firstRow].map((image) => (
            <div 
              class="relative group w-[320px] flex-shrink-0 overflow-hidden rounded-2xl shadow-md hover:shadow-xl transition-all duration-300 cursor-pointer gallery-item"
              data-src={image.src}
            >
              <div class="aspect-[3/4]">
                <img
                  src={image.src}
                  alt={image.alt}
                  width={320}
                  height={427}
                  class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                  loading="eager"
                  decoding="async"
                />
                <div class="absolute inset-0 bg-black opacity-0 group-hover:opacity-20 transition-opacity duration-300"></div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- 第二行 向右滚动 -->
      <div class="overflow-hidden">
        <div class="scroll-row flex gap-4" style={`animation-duration: ${animationDuration}s`}>
          {[...secondRow, ...secondRow].map((image) => (
            <div 
              class="relative group w-[320px] flex-shrink-0 overflow-hidden rounded-2xl shadow-md hover:shadow-xl transition-all duration-300 cursor-pointer gallery-item"
              data-src={image.src}
            >
              <div class="aspect-[3/4]">
                <img
                  src={image.src}
                  alt={image.alt}
                  width={320}
                  height={427}
                  class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                  loading="lazy"
                  decoding="async"
                />
                <div class="absolute inset-0 bg-black opacity-0 group-hover:opacity-20 transition-opacity duration-300"></div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>

  <!-- 全屏查看模态框 -->
  <div id="imageModal" class="fixed inset-0 bg-black bg-opacity-90 z-50 hidden items-center justify-center">
    <button class="absolute top-4 right-4 text-white text-4xl hover:text-gray-300" id="closeModal">
      <Twemoji emoji="❌" size="1.2em" />
    </button>
    <div class="relative w-full h-full flex items-center justify-center">
      <img id="modalImage" class="max-h-[90vh] max-w-[90vw] object-contain opacity-0 transition-opacity duration-300" src="" alt="Full screen image" />
      <button class="absolute left-4 top-1/2 transform -translate-y-1/2 text-white" id="prevImage">
        <Twemoji emoji="⬅️" size="2em" />
      </button>
      <button class="absolute right-4 top-1/2 transform -translate-y-1/2 text-white" id="nextImage">
        <Twemoji emoji="➡️" size="2em" />
      </button>
      <div id="loadingIndicator" class="hidden absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
        <div class="animate-spin rounded-full h-12 w-12 border-4 border-white border-t-transparent"></div>
      </div>
    </div>
  </div>
</section>

<style>
@keyframes scrollLeft {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(calc(-320px * 8 - 1rem * 8));
  }
}

@keyframes scrollRight {
  0% {
    transform: translateX(calc(-320px * 8 - 1rem * 8));
  }
  100% {
    transform: translateX(0);
  }
}

.scroll-row {
  animation: scrollLeft linear infinite;
  will-change: transform;
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
}

.scroll-row:nth-child(even) {
  animation-name: scrollRight;
}

.scroll-row:hover {
  animation-play-state: paused;
}
</style>

<script>
interface GalleryItem extends HTMLElement {
  querySelector(selector: string): HTMLImageElement | null;
}

// 初始化
document.addEventListener('DOMContentLoaded', () => {
  const modal = document.getElementById('imageModal') as HTMLDivElement;
  const modalImg = document.getElementById('modalImage') as HTMLImageElement;
  const loadingIndicator = document.getElementById('loadingIndicator') as HTMLDivElement;
  const galleryItems = document.querySelectorAll<GalleryItem>('.gallery-item');
  let currentImageIndex = 0;

  if (!modal || !modalImg || !loadingIndicator) {
    console.error('Required elements not found');
    return;
  }

  // 显示大图
  async function showImage(index: number) {
    const items = Array.from(galleryItems);
    if (index < 0 || index >= items.length) return;
    
    currentImageIndex = index;
    if (loadingIndicator) loadingIndicator.classList.remove('hidden');
    if (modalImg) modalImg.classList.add('opacity-0');

    try {
      const src = items[index].getAttribute('data-src');
      if (!src || !modalImg || !loadingIndicator) return;
      
      modalImg.src = src;
      const imgElement = items[index].querySelector('img');
      modalImg.alt = imgElement ? imgElement.alt : '';
      modalImg.onload = () => {
        if (modalImg && loadingIndicator) {
          modalImg.classList.remove('opacity-0');
          loadingIndicator.classList.add('hidden');
        }
      };
    } catch (error) {
      console.error('Failed to load image:', error);
      if (loadingIndicator) loadingIndicator.classList.add('hidden');
    }
  }

  // 初始化图片点击事件
  galleryItems.forEach((item, index) => {
    item.addEventListener('click', () => {
      modal.classList.remove('hidden');
      modal.classList.add('flex');
      document.body.style.overflow = 'hidden';
      showImage(index);
    });
  });

  // 模态框控制
  const closeBtn = document.getElementById('closeModal');
  const prevImgBtn = document.getElementById('prevImage');
  const nextImgBtn = document.getElementById('nextImage');

  closeBtn?.addEventListener('click', () => {
    modal.classList.add('hidden');
    modal.classList.remove('flex');
    document.body.style.overflow = '';
  });

  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
      document.body.style.overflow = '';
    }
  });

  prevImgBtn?.addEventListener('click', (e) => {
    e.stopPropagation();
    const items = Array.from(galleryItems);
    showImage((currentImageIndex - 1 + items.length) % items.length);
  });

  nextImgBtn?.addEventListener('click', (e) => {
    e.stopPropagation();
    const items = Array.from(galleryItems);
    showImage((currentImageIndex + 1) % items.length);
  });

  // 键盘控制
  document.addEventListener('keydown', (e) => {
    if (!modal.classList.contains('hidden')) {
      const items = Array.from(galleryItems);
      switch(e.key) {
        case 'Escape':
          modal.classList.add('hidden');
          modal.classList.remove('flex');
          document.body.style.overflow = '';
          break;
        case 'ArrowLeft':
          showImage((currentImageIndex - 1 + items.length) % items.length);
          break;
        case 'ArrowRight':
          showImage((currentImageIndex + 1) % items.length);
          break;
      }
    }
  });

  // 使用 Intersection Observer 优化滚动性能
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach(entry => {
        const row = entry.target as HTMLElement;
        if (entry.isIntersecting && row.style) {
          row.style.animationPlayState = 'running';
        } else if (row.style) {
          row.style.animationPlayState = 'paused';
        }
      });
    },
    { threshold: 0.1 }
  );

  document.querySelectorAll('.scroll-row').forEach(row => {
    observer.observe(row);
  });
});
</script>