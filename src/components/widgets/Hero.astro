---
import { Image } from 'astro:assets';
import Button from '~/components/ui/Button.astro';
import StackedCards from './StackedCards.astro';
import logoSvg from '~/assets/images/logo.svg';
import mascotImage from '~/assets/images/design.png';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// 生成随机粒子位置和动画延迟
const particles = Array.from({ length: 15 }, () => ({
  top: Math.random() * 100,
  left: Math.random() * 100,
  size: Math.random() * 4 + 2,
  delay: Math.random() * 2,
  duration: Math.random() * 2 + 2
}));

// 示例卡片数据
const cards = [
{
    title: "精美交互",
    description: "手势和动画简单纯粹",
    image: "https://i.postimg.cc/ZqhJ5KLd/moecard-preview.webp"
  },
  {
    title: "文本编辑器",
    description: "轻松简单的文本编辑工具，支持多种格式和样式",
    image: "https://i.postimg.cc/8csS0FTq/texteditor.webp"
  },
  {
    title: "专业功能",
    description: "丰富的专业级功能，满足各类创作需求",
    image: "https://i.postimg.cc/pdYRhb01/pro-function.webp"
  },
  {
    title: "画布编辑",
    description: "强大的画布编辑功能，支持多种绘图工具和效果",
    image: "https://i.postimg.cc/vZnQy65y/canvas-sample.webp"
  },
  {
    title: "草稿管理",
    description: "便捷的草稿管理系统，随时保存和恢复创作进度",
    image: "https://i.postimg.cc/TwdGn7F2/drafts.webp"
  },
  {
    title: "自定义素材库",
    description: "内置图像制作和选择工具，让创作更加便捷",
    image: "https://i.postimg.cc/Hx6mz01w/imagemakerandpicker.webp"
  }
];
---

<section class="relative not-prose min-h-screen" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {
        bg ? <Fragment set:html={bg} /> : 
        <div class="absolute inset-0 overflow-hidden">
          <!-- App 形象装饰 -->
          <div class="absolute right-[5%] top-[15%] w-48 h-48 opacity-20 dark:opacity-10">
            <Image
              src={mascotImage}
              alt="MoeCard Mascot"
              class="w-full h-full object-contain animate-float"
            />
          </div>
          <div class="absolute left-[10%] bottom-[20%] w-32 h-32 opacity-20 dark:opacity-10 rotate-[-15deg]">
            <Image
              src={mascotImage}
              alt="MoeCard Mascot"
              class="w-full h-full object-contain animate-float-delay"
            />
          </div>
          <div class="absolute right-[15%] bottom-[30%] w-40 h-40 opacity-15 dark:opacity-10 rotate-[10deg]">
            <Image
              src={mascotImage}
              alt="MoeCard Mascot"
              class="w-full h-full object-contain animate-float-reverse"
            />
          </div>
          <div class="absolute left-[20%] top-[25%] w-36 h-36 opacity-15 dark:opacity-10 rotate-[-5deg]">
            <Image
              src={mascotImage}
              alt="MoeCard Mascot"
              class="w-full h-full object-contain animate-float-slow"
            />
          </div>
          <div class="absolute right-[25%] top-[40%] w-24 h-24 opacity-15 dark:opacity-10 rotate-[15deg]">
            <Image
              src={mascotImage}
              alt="MoeCard Mascot"
              class="w-full h-full object-contain animate-float-bounce"
            />
          </div>

          <!-- 粒子动画 -->
          <div class="absolute inset-0">
            {particles.map((particle) => (
              <div
                class="absolute w-1 h-1 bg-green-400 dark:bg-green-300 rounded-full animate-particle"
                style={{
                  top: `${particle.top}%`,
                  left: `${particle.left}%`,
                  width: `${particle.size}px`,
                  height: `${particle.size}px`,
                  animationDelay: `${particle.delay}s`,
                  animationDuration: `${particle.duration}s`
                }}
              />
            ))}
          </div>

          <!-- 左上角装饰 -->
          <div class="absolute -left-4 -top-4 w-64 h-64 bg-green-50 dark:bg-green-900/20 rounded-full blur-3xl opacity-30 animate-pulse"></div>
          
          <!-- 右上角装饰 -->
          <div class="absolute -right-16 -top-16 w-48 h-48">
            <svg class="w-full h-full text-green-200 dark:text-green-900/30 animate-spin-slow" viewBox="0 0 200 200">
              {Array.from({ length: 12 }).map((_, i) => (
                <circle
                  cx={100 + Math.cos(i * 30 * Math.PI / 180) * 70}
                  cy={100 + Math.sin(i * 30 * Math.PI / 180) * 70}
                  r="4"
                  class="fill-current"
                />
              ))}
            </svg>
          </div>
          
          <!-- 左侧装饰 -->
          <div class="absolute left-1/4 top-1/4 w-32 h-32">
            <svg class="w-full h-full text-green-300 dark:text-green-800/30" viewBox="0 0 100 100">
              <path
                d="M10,50 Q30,20 50,50 T90,50"
                class="stroke-current fill-none animate-draw"
                stroke-width="2"
                pathLength="100"
              />
              <path
                d="M10,60 Q30,30 50,60 T90,60"
                class="stroke-current fill-none animate-draw-delay"
                stroke-width="2"
                pathLength="100"
              />
            </svg>
          </div>
          
          <!-- 右侧装饰 -->
          <div class="absolute right-1/4 bottom-1/4">
            <div class="w-24 h-24 rounded-full border-4 border-green-200 dark:border-green-800/30 opacity-50 animate-pulse-slow"></div>
            <div class="w-16 h-16 rounded-full border-4 border-green-300 dark:border-green-700/30 opacity-50 -mt-20 ml-12 animate-pulse-slow-delay"></div>
          </div>
          
          <!-- 底部装饰 -->
          <div class="absolute bottom-0 w-full h-24 overflow-hidden">
            <div class="absolute inset-0 animate-wave">
              <svg class="w-full h-full text-green-100 dark:text-green-900/20" preserveAspectRatio="none" viewBox="0 0 1440 54">
                <path d="M0,0 C480,54 960,54 1440,0 L1440,54 L0,54 Z" class="fill-current"/>
              </svg>
            </div>
          </div>
        </div>
      }
    </slot>
  </div>

  <div class="relative mx-auto h-full flex items-center">
    <div class="w-full max-w-7xl mx-auto px-4 sm:px-6 pt-4">
      <div class="flex flex-col md:flex-row items-center justify-between gap-8 md:gap-12">
        <!-- 内容区域 -->
        <div class="w-full md:w-[45%] text-center md:text-left self-center">
          <div class="flex items-center justify-center md:justify-start mb-6">
            <div class="w-16 h-16 relative">
              <Image 
                src={logoSvg}
                alt="MoCard Logo" 
                class="w-full h-full object-contain rounded-2xl shadow-lg"
                style={{
                  filter: 'drop-shadow(0 4px 6px rgba(0, 0, 0, 0.1))'
                }}
              />
            </div>
            <div class="ml-4">
              <h2 class="text-2xl font-bold bg-gradient-to-r from-green-500 to-green-600 bg-clip-text text-transparent">MoE Card</h2>
              <p class="text-sm text-gray-600 dark:text-gray-300">{tagline}</p>
            </div>
          </div>
          {
            tagline && (
              <p
                class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase mb-2"
                set:html={tagline}
              />
            )
          }
          {
            title && (
              <h1
                class="text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-3 font-heading dark:text-gray-200"
                set:html={title}
              />
            )
          }
          <div class="max-w-3xl md:max-w-none mx-auto">
            {
              subtitle && (
                <p
                  class="text-lg text-muted mb-4 dark:text-slate-300"
                  set:html={subtitle}
                />
              )
            }
            {
              actions && (
                <div class="flex flex-col sm:flex-row justify-center md:justify-start gap-3">
                  {Array.isArray(actions) ? (
                    actions.map((action) => (
                      <div class="flex w-full sm:w-auto">
                        <Button {...(action || {})} class="w-full sm:mb-0" />
                      </div>
                    ))
                  ) : (
                    <Fragment set:html={actions} />
                  )}
                </div>
              )
            }
          </div>
          {content && <Fragment set:html={content} />}
        </div>

        <!-- 卡片堆叠区域 -->
        <div class="w-full md:w-[55%] relative self-center order-last md:order-none">
          <div class="w-full">
            <StackedCards
              cards={cards}
              class="transform hover:scale-105 transition-transform duration-300"
            />
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  @keyframes particle {
    0%, 100% {
      transform: translateY(0) scale(1);
      opacity: 0.5;
    }
    50% {
      transform: translateY(-20px) scale(1.2);
      opacity: 0.8;
    }
  }

  @keyframes draw {
    0% {
      stroke-dashoffset: 100;
    }
    100% {
      stroke-dashoffset: 0;
    }
  }

  @keyframes wave {
    0% {
      transform: translateX(0) translateZ(0) scaleY(1);
    }
    50% {
      transform: translateX(-25%) translateZ(0) scaleY(0.8);
    }
    100% {
      transform: translateX(-50%) translateZ(0) scaleY(1);
    }
  }

  .animate-particle {
    animation: particle var(--duration, 3s) ease-in-out infinite;
    animation-delay: var(--delay, 0s);
  }

  .animate-draw {
    stroke-dasharray: 100;
    animation: draw 2s ease-in-out infinite;
  }

  .animate-draw-delay {
    stroke-dasharray: 100;
    animation: draw 2s ease-in-out 1s infinite;
  }

  .animate-wave {
    animation: wave 10s cubic-bezier(0.36, 0.45, 0.63, 0.53) infinite;
    transform-origin: 0% 100%;
  }

  .animate-float {
    animation: float 6s ease-in-out infinite;
  }

  .animate-float-delay {
    animation: float 6s ease-in-out 2s infinite;
  }

  .animate-float-reverse {
    animation: float 6s ease-in-out infinite reverse;
  }

  .animate-float-slow {
    animation: float 8s ease-in-out infinite;
  }

  .animate-float-bounce {
    animation: floatBounce 4s ease-in-out infinite;
  }

  @keyframes float {
    0%, 100% {
      transform: translateY(0) rotate(var(--rotate, 0deg));
    }
    50% {
      transform: translateY(-20px) rotate(var(--rotate, 0deg));
    }
  }

  @keyframes floatBounce {
    0%, 100% {
      transform: translateY(0) rotate(var(--rotate, 0deg)) scale(1);
    }
    50% {
      transform: translateY(-15px) rotate(var(--rotate, 0deg)) scale(1.1);
    }
  }

  .animate-spin-slow {
    animation: spin 10s linear infinite;
  }

  .animate-pulse-slow {
    animation: pulse 4s ease-in-out infinite;
  }

  .animate-pulse-slow-delay {
    animation: pulse 4s ease-in-out 2s infinite;
  }
</style>
