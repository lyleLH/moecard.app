---
import { Image } from 'astro:assets';
import Button from '~/components/ui/Button.astro';
import StackedCards from './StackedCards.astro';
import logoSvg from '~/assets/images/logo.svg';
import mascotImage from '~/assets/images/design.png';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// 生成随机粒子位置和动画延迟
const particles = Array.from({ length: 15 }, () => ({
  top: Math.random() * 100,
  left: Math.random() * 100,
  size: Math.random() * 4 + 2,
  delay: Math.random() * 2,
  duration: Math.random() * 2 + 2
}));

// 示例卡片数据
const cards = [
{
    title: "精美交互",
    description: "手势和动画简单纯粹",
    image: "https://i.postimg.cc/ZqhJ5KLd/moecard-preview.webp"
  },
  {
    title: "文本编辑器",
    description: "轻松简单的文本编辑工具，支持多种格式和样式",
    image: "https://i.postimg.cc/8csS0FTq/texteditor.webp"
  },
  {
    title: "专业功能",
    description: "丰富的专业级功能，满足各类创作需求",
    image: "https://i.postimg.cc/pdYRhb01/pro-function.webp"
  },
  {
    title: "画布编辑",
    description: "强大的画布编辑功能，支持多种绘图工具和效果",
    image: "https://i.postimg.cc/vZnQy65y/canvas-sample.webp"
  },
  {
    title: "草稿管理",
    description: "便捷的草稿管理系统，随时保存和恢复创作进度",
    image: "https://i.postimg.cc/TwdGn7F2/drafts.webp"
  },
  {
    title: "自定义素材库",
    description: "内置图像制作和选择工具，让创作更加便捷",
    image: "https://i.postimg.cc/Hx6mz01w/imagemakerandpicker.webp"
  }
];
---

<section class="relative not-prose min-h-[calc(100vh-var(--header-height,0px))] flex flex-col justify-center overflow-hidden" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {
        bg ? <Fragment set:html={bg} /> : 
        <div class="absolute inset-0 overflow-hidden">
          <!-- 渐变背景 -->
          <div class="absolute inset-0 bg-gradient-to-br from-green-50/50 via-white to-green-100/30 dark:from-green-900/20 dark:via-slate-900 dark:to-green-800/20"></div>
          
          <!-- 几何形状动画 -->
          <div class="absolute inset-0">
            <!-- 动态网格背景 -->
            <div class="absolute inset-0 opacity-10 dark:opacity-5">
              <div class="absolute inset-0 bg-[linear-gradient(to_right,#4ade80_1px,transparent_1px),linear-gradient(to_bottom,#4ade80_1px,transparent_1px)] bg-[size:4rem_4rem] [mask-image:radial-gradient(ellipse_80%_50%_at_50%_50%,#000_70%,transparent_110%)]"></div>
            </div>

            <!-- 浮动几何形状 -->
            <div class="absolute left-[10%] top-[20%] w-64 h-64 bg-green-200/20 dark:bg-green-800/20 rounded-full blur-3xl animate-float"></div>
            <div class="absolute right-[15%] bottom-[25%] w-72 h-72 bg-green-300/20 dark:bg-green-700/20 rounded-full blur-3xl animate-float-delay"></div>
            <div class="absolute left-[20%] bottom-[15%] w-48 h-48 bg-green-400/20 dark:bg-green-600/20 rounded-full blur-3xl animate-float-reverse"></div>
            
            <!-- 动态线条 -->
            <div class="absolute inset-0">
              <svg class="w-full h-full opacity-20 dark:opacity-10" viewBox="0 0 100 100" preserveAspectRatio="none">
                <path
                  d="M0,50 Q25,20 50,50 T100,50"
                  class="stroke-green-400 dark:stroke-green-500 fill-none animate-draw"
                  stroke-width="0.5"
                  pathLength="100"
                />
                <path
                  d="M0,60 Q25,30 50,60 T100,60"
                  class="stroke-green-300 dark:stroke-green-600 fill-none animate-draw-delay"
                  stroke-width="0.5"
                  pathLength="100"
                />
              </svg>
          </div>
          </div>
          <div class="absolute right-[5%] top-[15%] w-48 h-48 opacity-20 dark:opacity-10">
            <Image
              src={mascotImage}
              alt="MoeCard Mascot"
              class="w-full h-full object-contain animate-float"
            />
          </div>
          <div class="absolute left-[10%] bottom-[20%] w-32 h-32 opacity-20 dark:opacity-10 rotate-[-15deg]">
            <Image
              src={mascotImage}
              alt="MoeCard Mascot"
              class="w-full h-full object-contain animate-float-delay"
            />
          </div>
          <div class="absolute right-[15%] bottom-[30%] w-40 h-40 opacity-15 dark:opacity-10 rotate-[10deg]">
            <Image
              src={mascotImage}
              alt="MoeCard Mascot"
              class="w-full h-full object-contain animate-float-reverse"
            />
          </div>

          <!-- 现代粒子效果 -->
          <div class="absolute inset-0">
            {particles.map((particle) => (
              <div
                class="absolute rounded-full bg-gradient-to-r from-green-400 to-green-500 dark:from-green-500 dark:to-green-600 animate-particle"
                style={{
                  top: `${particle.top}%`,
                  left: `${particle.left}%`,
                  width: `${particle.size}px`,
                  height: `${particle.size}px`,
                  animationDelay: `${particle.delay}s`,
                  animationDuration: `${particle.duration}s`,
                  opacity: 0.3
                }}
              />
            ))}
          </div>

          <!-- 新的波浪动画 -->
          <div class="absolute bottom-0 left-0 w-full">
            <svg class="waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none">
              <defs>
                <path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z" />
              </defs>
              <g class="wave-parallax">
                <use xlink:href="#gentle-wave" x="48" y="0" class="wave1" />
                <use xlink:href="#gentle-wave" x="48" y="3" class="wave2" />
                <use xlink:href="#gentle-wave" x="48" y="5" class="wave3" />
                <use xlink:href="#gentle-wave" x="48" y="7" class="wave4" />
              </g>
            </svg>
          </div>
        </div>
      }
    </slot>
  </div>

  <div class="relative flex-1 flex items-center">
    <div class="w-full max-w-7xl mx-auto px-4 sm:px-6 py-12 md:py-16">
      <div class="flex flex-col md:flex-row items-center justify-between gap-8 md:gap-12">
        <!-- 内容区域 -->
        <div class="w-full md:w-[45%] text-center md:text-left self-center">
          {
            title && (
              <h1
                class="text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-3 font-heading dark:text-gray-200"
                set:html={title}
              />
            )
          }
          <div class="max-w-3xl md:max-w-none mx-auto">
            {
              subtitle && (
                <p
                  class="text-lg text-muted mb-4 dark:text-slate-300"
                  set:html={subtitle}
                />
              )
            }
            {
              actions && (
                <div class="flex flex-col sm:flex-row justify-center md:justify-start gap-3">
                  {Array.isArray(actions) ? (
                    actions.map((action) => (
                      <div class="flex w-full sm:w-auto">
                        <Button {...(action || {})} class="w-full sm:mb-0" />
                      </div>
                    ))
                  ) : (
                    <Fragment set:html={actions} />
                  )}
                </div>
              )
            }
          </div>
          {content && <Fragment set:html={content} />}
        </div>

        <!-- 卡片堆叠区域 -->
        <div class="w-full md:w-[55%] relative self-center order-last md:order-none">
          <div class="w-full max-h-[60vh]">
            <StackedCards
              cards={cards}
              class="transform hover:scale-105 transition-transform duration-300"
            />
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  @keyframes particle {
    0%, 100% {
      transform: translateY(0) scale(1);
      opacity: 0.5;
    }
    50% {
      transform: translateY(-20px) scale(1.2);
      opacity: 0.8;
    }
  }

  @keyframes draw {
    0% {
      stroke-dashoffset: 100;
    }
    100% {
      stroke-dashoffset: 0;
    }
  }

  @keyframes wave {
    0% {
      transform: translateX(0) translateZ(0) scaleY(1);
    }
    50% {
      transform: translateX(-25%) translateZ(0) scaleY(0.95);
    }
    100% {
      transform: translateX(-50%) translateZ(0) scaleY(1);
    }
  }

  .animate-particle {
    animation: particle var(--duration, 3s) ease-in-out infinite;
    animation-delay: var(--delay, 0s);
  }

  .animate-draw {
    stroke-dasharray: 100;
    animation: draw 2s ease-in-out infinite;
  }

  .animate-draw-delay {
    stroke-dasharray: 100;
    animation: draw 2s ease-in-out 1s infinite;
  }

  .animate-wave {
    animation: wave 20s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;
    transform-origin: 0% 50%;
  }

  .animate-wave-delay {
    animation: wave 18s cubic-bezier(0.55, 0.5, 0.45, 0.5) -9s infinite;
    transform-origin: 0% 50%;
  }

  .animate-float {
    animation: float 6s ease-in-out infinite;
  }

  .animate-float-delay {
    animation: float 6s ease-in-out 2s infinite;
  }

  .animate-float-reverse {
    animation: float 6s ease-in-out infinite reverse;
  }

  .animate-float-slow {
    animation: float 8s ease-in-out infinite;
  }

  .animate-float-bounce {
    animation: floatBounce 4s ease-in-out infinite;
  }

  @keyframes float {
    0%, 100% {
      transform: translateY(0) rotate(var(--rotate, 0deg));
    }
    50% {
      transform: translateY(-20px) rotate(var(--rotate, 0deg));
    }
  }

  @keyframes floatBounce {
    0%, 100% {
      transform: translateY(0) rotate(var(--rotate, 0deg)) scale(1);
    }
    50% {
      transform: translateY(-15px) rotate(var(--rotate, 0deg)) scale(1.1);
    }
  }

  .animate-spin-slow {
    animation: spin 10s linear infinite;
  }

  .animate-pulse-slow {
    animation: pulse 4s ease-in-out infinite;
  }

  .animate-pulse-slow-delay {
    animation: pulse 4s ease-in-out 2s infinite;
  }

  .waves {
    width: 100%;
    height: 100px;
    min-height: 100px;
    max-height: 150px;
    position: absolute;
    bottom: 0;
  }

  .wave-parallax > use {
    animation: move-forever 25s cubic-bezier(.55,.5,.45,.5) infinite;
    fill: currentColor;
  }

  .wave1 {
    color: rgba(74, 222, 128, 0.08);
    animation-delay: -2s;
    animation-duration: 7s;
  }
  
  .wave2 {
    color: rgba(74, 222, 128, 0.12);
    animation-delay: -3s;
    animation-duration: 10s;
  }
  
  .wave3 {
    color: rgba(74, 222, 128, 0.16);
    animation-delay: -4s;
    animation-duration: 13s;
  }
  
  .wave4 {
    color: rgba(74, 222, 128, 0.20);
    animation-delay: -5s;
    animation-duration: 20s;
  }

  @keyframes move-forever {
    0% {
      transform: translate3d(-90px,0,0);
    }
    100% { 
      transform: translate3d(85px,0,0);
    }
  }

  /* 暗色模式适配 */
  :global(.dark) .wave1 { color: rgba(22, 101, 52, 0.08); }
  :global(.dark) .wave2 { color: rgba(22, 101, 52, 0.12); }
  :global(.dark) .wave3 { color: rgba(22, 101, 52, 0.16); }
  :global(.dark) .wave4 { color: rgba(22, 101, 52, 0.20); }

  /* 响应式调整 */
  @media (max-width: 768px) {
    .waves {
      height: 80px;
      min-height: 80px;
    }
  }

  /* 添加响应式高度控制 */
  :root {
    --header-height: 72px;
  }

  @media (max-width: 768px) {
    :root {
      --header-height: 64px;
    }
  }

  @media (max-height: 800px) {
    .waves {
      height: 60px;
      min-height: 60px;
    }
  }

  @media (max-height: 600px) {
    .waves {
      height: 40px;
      min-height: 40px;
    }
  }
</style>
