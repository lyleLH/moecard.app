---
import { getLangFromUrl, useTranslations } from '~/i18n/utils';

interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Define cards using translations
const cards = [
  {
    title: t('stacked-cards.interaction.title') as string,
    description: t('stacked-cards.interaction.desc') as string,
    image: "https://i.postimg.cc/ZqhJ5KLd/moecard-preview.webp"
  },
  {
    title: t('stacked-cards.editor.title') as string,
    description: t('stacked-cards.editor.desc') as string,
    image: "https://i.postimg.cc/8csS0FTq/texteditor.webp"
  },
  {
    title: t('stacked-cards.pro.title') as string,
    description: t('stacked-cards.pro.desc') as string,
    image: "https://i.postimg.cc/pdYRhb01/pro-function.webp"
  },
  {
    title: t('stacked-cards.canvas.title') as string,
    description: t('stacked-cards.canvas.desc') as string,
    image: "https://i.postimg.cc/vZnQy65y/canvas-sample.webp"
  },
  {
    title: t('stacked-cards.drafts.title') as string,
    description: t('stacked-cards.drafts.desc') as string,
    image: "https://i.postimg.cc/TwdGn7F2/drafts.webp"
  },
  {
    title: t('stacked-cards.assets.title') as string,
    description: t('stacked-cards.assets.desc') as string,
    image: "https://i.postimg.cc/Hx6mz01w/imagemakerandpicker.webp"
  }
];
---

<div class:list={['stacked-cards-container', className]} id="stacked-cards">
  <div class="cards-wrapper">
    <div class="cards-scroll-container">
      <div class="cards-inner">
        {
          cards.map((card, index) => (
            <div
              class="card"
              style={`--index: ${index}; --total: ${cards.length};`}
              data-card-index={index}
              data-image={card.image}
            >
              <div class="card-content">
                <div class="card-image-wrapper">
                  <img
                    src={card.image}
                    alt={card.title}
                    class="card-image"
                    loading={index === 0 ? "eager" : "lazy"}
                  />
                </div>
                <div class="card-info">
                  <h3 class="card-title">{card.title}</h3>
                  <p class="card-description">{card.description}</p>
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</div>

<!-- Lightbox Modal -->
<div id="lightbox" class="lightbox">
  <button class="lightbox-close">&times;</button>
  <img id="lightbox-image" src="" alt="" />
</div>

<style>
  .stacked-cards-container {
    position: relative;
    width: 100%;
    min-height: 480px;
    perspective: 2000px;
    display: flex;
    align-items: flex-start;
    justify-content: center;
    padding: 40px 0;
    overflow: visible;
  }

  .cards-wrapper {
    position: relative;
    width: 420px;
    transform-style: preserve-3d;
    display: flex;
    justify-content: center;
    align-items: flex-start;
  }

  .card {
    position: absolute;
    width: 360px;
    height: 480px;
    border-radius: 20px;
    background: #ffffff;
    box-shadow: 
      0 10px 30px rgba(0, 0, 0, 0.1),
      0 1px 8px rgba(0, 0, 0, 0.06);
    transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1);
    transform-origin: right center;
    cursor: pointer;
    transform: translateX(calc(var(--index) * -40px))
               translateZ(calc(var(--index) * -40px))
               rotateY(calc(var(--index) * -4deg));
    right: 0;
    overflow: hidden;
    will-change: transform, z-index;
  }

  .card:hover {
    transform: translateX(calc(var(--index) * -40px))
               translateZ(0)
               rotateY(0deg)
               scale(1.05);
    z-index: 10;
  }

  .card-content {
    height: 100%;
    display: flex;
    flex-direction: column;
    opacity: calc(1 - var(--index) * 0.15);
    transition: all 0.3s ease;
    pointer-events: none;
  }

  .card:hover .card-content {
    opacity: 1;
  }

  .card-image-wrapper {
    width: 100%;
    height: 320px;
    overflow: hidden;
    position: relative;
    background: #f8f8f8;
  }

  .card-image {
    width: 100%;
    height: 100%;
    object-fit: contain;
    transition: transform 0.5s cubic-bezier(0.23, 1, 0.32, 1);
  }

  .card:hover .card-image {
    transform: scale(1.05);
  }

  .card-info {
    padding: 24px;
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    background: linear-gradient(
      to bottom,
      rgba(255, 255, 255, 0.95) 0%,
      rgba(255, 255, 255, 1) 100%
    );
    border-top: 1px solid rgba(0, 0, 0, 0.05);
  }

  .card-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 8px;
    line-height: 1.3;
    color: #1a1a1a;
    text-align: center;
  }

  .card-description {
    font-size: 1rem;
    line-height: 1.5;
    color: #666;
    text-align: center;
  }

  .lightbox {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.95);
    z-index: 100;
    justify-content: center;
    align-items: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .lightbox.active {
    display: flex;
    opacity: 1;
  }

  .lightbox img {
    max-width: 95%;
    max-height: 95vh;
    object-fit: contain;
    border-radius: 8px;
    transform: scale(0.95);
    transition: transform 0.3s cubic-bezier(0.23, 1, 0.32, 1);
    box-shadow: 0 0 40px rgba(0, 0, 0, 0.6);
  }

  .lightbox.active img {
    transform: scale(1);
  }

  .lightbox-close {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2.5rem;
    background: rgba(0, 0, 0, 0.7);
    color: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    padding: 0;
    line-height: 1;
    opacity: 0.9;
    transition: all 0.3s ease;
    z-index: 101;
    -webkit-tap-highlight-color: transparent;
  }

  .lightbox-close:hover {
    opacity: 1;
    background: rgba(0, 0, 0, 0.9);
    transform: translateX(-50%) scale(1.1);
  }

  /* Dark mode styles */
  :global(.dark) .card {
    background: #1a1a1a;
    box-shadow: 
      0 10px 30px rgba(0, 0, 0, 0.3),
      0 1px 8px rgba(0, 0, 0, 0.2);
  }

  :global(.dark) .card:hover {
    box-shadow: 
      0 20px 40px rgba(0, 0, 0, 0.4),
      0 2px 12px rgba(0, 0, 0, 0.3);
  }

  :global(.dark) .card-image-wrapper {
    background: #222;
  }

  :global(.dark) .card-info {
    background: linear-gradient(
      to bottom,
      rgba(26, 26, 26, 0.95) 0%,
      rgba(26, 26, 26, 1) 100%
    );
  }

  :global(.dark) .card-title {
    color: #fff;
  }

  :global(.dark) .card-description {
    color: #aaa;
  }
</style>

<script>
  function initializeCards() {
    const container = document.getElementById('stacked-cards');
    if (!container) return;

    const cards = Array.from(container.querySelectorAll('.card')) as HTMLElement[];
    const lightbox = document.getElementById('lightbox');
    const lightboxImage = document.getElementById('lightbox-image') as HTMLImageElement;
    const lightboxClose = document.querySelector('.lightbox-close');

    if (!lightbox || !lightboxImage || !lightboxClose) return;

    // 卡片交互处理
    cards.forEach((card, index) => {
      // 鼠标进入卡片
      card.addEventListener('mouseenter', (e) => {
        const rect = card.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        
        // 只在卡片右侧区域触发
        if (mouseX > rect.width * 0.3) {
          card.style.transform = `
            translateX(calc(${index} * -40px))
            translateZ(0)
            rotateY(0deg)
            scale(1.05)
          `;
          card.style.zIndex = '10';
          
          // 调整其他卡片的位置
          cards.forEach((otherCard, otherIndex) => {
            if (otherIndex !== index) {
              if (otherIndex > index) {
                // 后面的卡片
                otherCard.style.transform = `
                  translateX(calc(${otherIndex} * -40px + 20px))
                  translateZ(calc(${otherIndex - index} * -40px))
                  rotateY(calc(${otherIndex - index} * -4deg))
                `;
              } else {
                // 前面的卡片
                otherCard.style.transform = `
                  translateX(calc(${otherIndex} * -40px))
                  translateZ(calc(${index - otherIndex} * -40px))
                  rotateY(calc(${index - otherIndex} * -4deg))
                `;
              }
              otherCard.style.zIndex = '1';
            }
          });
        }
      });

      // 鼠标离开卡片
      card.addEventListener('mouseleave', () => {
        // 恢复所有卡片的原始状态
        cards.forEach((card, cardIndex) => {
          card.style.transform = `
            translateX(calc(${cardIndex} * -40px))
            translateZ(calc(${cardIndex} * -40px))
            rotateY(calc(${cardIndex} * -4deg))
          `;
          card.style.zIndex = '';
        });
      });

      // 点击事件处理
      card.addEventListener('click', () => {
        const imageUrl = card.dataset.image;
        if (!imageUrl) return;
        
        lightboxImage.src = imageUrl;
        lightbox.classList.add('active');
      });
    });

    // Lightbox 关闭处理
    lightboxClose.addEventListener('click', () => {
      lightbox.classList.remove('active');
    });

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && lightbox.classList.contains('active')) {
        lightbox.classList.remove('active');
      }
    });

    lightbox.addEventListener('click', (e) => {
      if (e.target === lightbox) {
        lightbox.classList.remove('active');
      }
    });
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initializeCards);

  // Re-initialize when the component is mounted
  if (document.readyState === 'complete') {
    initializeCards();
  }

  // Re-initialize on view transitions
  document.addEventListener('astro:after-swap', initializeCards);
  document.addEventListener('astro:page-load', initializeCards);
</script> 